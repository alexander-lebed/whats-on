/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
};

export type Event = {
  _id: string;
  _type: 'event';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<
    {
      _key: string;
    } & InternationalizedArrayStringValue
  >;
  slug: Slug;
  summary: Array<
    {
      _key: string;
    } & InternationalizedArrayTextValue
  >;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  categories?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'category';
  }>;
  startDateTime: string;
  endDateTime?: string;
  isDigital?: boolean;
  place?:
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'place';
      }
    | {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'organizer';
      };
  organizer?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'organizer';
  };
  ticketUrl?: string;
  website?: string;
  price?: number;
  isFree?: boolean;
  isFeatured?: boolean;
};

export type Organizer = {
  _id: string;
  _type: 'organizer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  address?: string;
  location?: Geopoint;
  email?: string;
  phone?: string;
};

export type Place = {
  _id: string;
  _type: 'place';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  address?: string;
  location?: Geopoint;
};

export type InternationalizedArrayTextValue = {
  _type: 'internationalizedArrayTextValue';
  value?: string;
};

export type InternationalizedArrayStringValue = {
  _type: 'internationalizedArrayStringValue';
  value?: string;
};

export type InternationalizedArrayText = Array<
  {
    _key: string;
  } & InternationalizedArrayTextValue
>;

export type InternationalizedArrayString = Array<
  {
    _key: string;
  } & InternationalizedArrayStringValue
>;

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height: number;
  width: number;
  aspectRatio: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x: number;
  y: number;
  height: number;
  width: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top: number;
  bottom: number;
  left: number;
  right: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Category
  | Event
  | Organizer
  | Place
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayText
  | InternationalizedArrayString
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./lib/sanity/queries.ts
// Variable: EVENTS_QUERY_I18N
// Query: *[    _type == "event"    && defined(startDateTime)    && defined(slug.current)    && !(_id in path('drafts.**'))    && (      dateTime(startDateTime) >= dateTime(now())      || (defined(endDateTime) && dateTime(endDateTime) >= dateTime(now()))    )  ] | order(dateTime(startDateTime) asc) {    ..., // include all fields by default    "slug": slug.current,    "title": coalesce(coalesce(  title[ _key == $lang ][0].value,  title[ _key == 'en' ][0].value,  title[ _key == 'es' ][0].value,  title[0].value,  null), ""),    "summary": coalesce(coalesce(  summary[ _key == $lang ][0].value,  summary[ _key == 'en' ][0].value,  summary[ _key == 'es' ][0].value,  summary[0].value,  null), ""),    "categories": categories[]-> { _id, title, slug },    "place": coalesce(place-> { _id, title, slug, address, location }, null),    organizer-> { _id, title, slug }  }
export type EVENTS_QUERY_I18NResult = Array<{
  _id: string;
  _type: 'event';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | '';
  slug: string;
  summary: string | '';
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  categories: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  startDateTime: string;
  endDateTime?: string;
  isDigital?: boolean;
  place: {
    _id: string;
    title: string;
    slug: Slug;
    address: string | null;
    location: Geopoint | null;
  } | null;
  organizer: {
    _id: string;
    title: string;
    slug: Slug;
  } | null;
  ticketUrl?: string;
  website?: string;
  price?: number;
  isFree?: boolean;
  isFeatured?: boolean;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[\n    _type == "event"\n    && defined(startDateTime)\n    && defined(slug.current)\n    && !(_id in path(\'drafts.**\'))\n    && (\n      dateTime(startDateTime) >= dateTime(now())\n      || (defined(endDateTime) && dateTime(endDateTime) >= dateTime(now()))\n    )\n  ] | order(dateTime(startDateTime) asc) {\n    ..., // include all fields by default\n    "slug": slug.current,\n    "title": coalesce(coalesce(\n  title[ _key == $lang ][0].value,\n  title[ _key == \'en\' ][0].value,\n  title[ _key == \'es\' ][0].value,\n  title[0].value,\n  null\n), ""),\n    "summary": coalesce(coalesce(\n  summary[ _key == $lang ][0].value,\n  summary[ _key == \'en\' ][0].value,\n  summary[ _key == \'es\' ][0].value,\n  summary[0].value,\n  null\n), ""),\n    "categories": categories[]-> { _id, title, slug },\n    "place": coalesce(place-> { _id, title, slug, address, location }, null),\n    organizer-> { _id, title, slug }\n  }\n': EVENTS_QUERY_I18NResult;
  }
}
